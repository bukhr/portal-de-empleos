# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `JobOffer`.
# Please instead update this file by running `bin/tapioca dsl JobOffer`.


class JobOffer
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::JobOffer).void)).returns(::JobOffer) }
    def new(attributes = nil, &block); end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def statuses; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::JobOffer).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::JobOffer).void)).returns(::JobOffer) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::JobOffer).void)
      ).returns(T::Array[::JobOffer])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::JobOffer).void)).returns(::JobOffer) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::JobOffer).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::JobOffer).void)).returns(::JobOffer) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::JobOffer).void)
      ).returns(T::Array[::JobOffer])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::JobOffer).void)).returns(::JobOffer) }
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::JobOffer).void)).returns(::JobOffer) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::JobOffer).void)
      ).returns(T::Array[::JobOffer])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::JobOffer).void)).returns(::JobOffer) }
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::JobOffer).void)
      ).returns(T::Array[::JobOffer])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::JobOffer).void)).returns(::JobOffer) }
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::JobOffer).void)
      ).returns(T::Array[::JobOffer])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::JobOffer).void)).returns(::JobOffer) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::JobOffer]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::JobOffer)) }
    def fifth; end

    sig { returns(::JobOffer) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::JobOffer)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::JobOffer])
    end
    sig { params(args: NilClass, block: T.proc.params(object: ::JobOffer).void).returns(T.nilable(::JobOffer)) }
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::JobOffer)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::JobOffer) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::JobOffer).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::JobOffer])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::JobOffer]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::JobOffer]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::JobOffer).void)
      ).returns(T::Array[::JobOffer])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::JobOffer).void)).returns(::JobOffer) }
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::JobOffer).void)
      ).returns(T::Array[::JobOffer])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::JobOffer).void)).returns(::JobOffer) }
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::JobOffer).void)
      ).returns(T::Array[::JobOffer])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::JobOffer).void)).returns(::JobOffer) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::JobOffer)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::JobOffer) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::JobOffer) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::JobOffer)) }
    sig { params(limit: Integer).returns(T::Array[::JobOffer]) }
    def first(limit = nil); end

    sig { returns(::JobOffer) }
    def first!; end

    sig { returns(T.nilable(::JobOffer)) }
    def forty_two; end

    sig { returns(::JobOffer) }
    def forty_two!; end

    sig { returns(T.nilable(::JobOffer)) }
    def fourth; end

    sig { returns(::JobOffer) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::JobOffer)) }
    sig { params(limit: Integer).returns(T::Array[::JobOffer]) }
    def last(limit = nil); end

    sig { returns(::JobOffer) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::JobOffer).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::JobOffer).void)).returns(::JobOffer) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::JobOffer).void)
      ).returns(T::Array[::JobOffer])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::JobOffer).void)).returns(::JobOffer) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::JobOffer).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::JobOffer).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::JobOffer)) }
    def second; end

    sig { returns(::JobOffer) }
    def second!; end

    sig { returns(T.nilable(::JobOffer)) }
    def second_to_last; end

    sig { returns(::JobOffer) }
    def second_to_last!; end

    sig { returns(::JobOffer) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::JobOffer).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::JobOffer)) }
    sig { params(limit: Integer).returns(T::Array[::JobOffer]) }
    def take(limit = nil); end

    sig { returns(::JobOffer) }
    def take!; end

    sig { returns(T.nilable(::JobOffer)) }
    def third; end

    sig { returns(::JobOffer) }
    def third!; end

    sig { returns(T.nilable(::JobOffer)) }
    def third_to_last; end

    sig { returns(::JobOffer) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def closed!; end

    sig { returns(T::Boolean) }
    def closed?; end

    sig { void }
    def draft!; end

    sig { returns(T::Boolean) }
    def draft?; end

    sig { void }
    def published!; end

    sig { returns(T::Boolean) }
    def published?; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Company) }
    def build_company(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::JobOfferReference) }
    def build_job_offer_reference(*args, &blk); end

    sig { returns(T.nilable(::Company)) }
    def company; end

    sig { params(value: T.nilable(::Company)).void }
    def company=(value); end

    sig { returns(T::Boolean) }
    def company_changed?; end

    sig { returns(T::Boolean) }
    def company_previously_changed?; end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Company) }
    def create_company(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Company) }
    def create_company!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::JobOfferReference) }
    def create_job_offer_reference(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::JobOfferReference) }
    def create_job_offer_reference!(*args, &blk); end

    sig { returns(T.nilable(::JobOfferReference)) }
    def job_offer_reference; end

    sig { params(value: T.nilable(::JobOfferReference)).void }
    def job_offer_reference=(value); end

    sig { returns(T::Boolean) }
    def job_offer_reference_changed?; end

    sig { returns(T::Boolean) }
    def job_offer_reference_previously_changed?; end

    sig { returns(T.nilable(::Company)) }
    def reload_company; end

    sig { returns(T.nilable(::JobOfferReference)) }
    def reload_job_offer_reference; end

    sig { void }
    def reset_company; end

    sig { void }
    def reset_job_offer_reference; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_published(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def published(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig { params(blk: T.proc.params(record: ::JobOffer).returns(BasicObject)).returns(T::Array[::JobOffer]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(::Integer) }
    def company_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def company_id=(value); end

    sig { returns(T::Boolean) }
    def company_id?; end

    sig { returns(T.nilable(::Integer)) }
    def company_id_before_last_save; end

    sig { returns(T.untyped) }
    def company_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def company_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def company_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def company_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def company_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def company_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def company_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def company_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def company_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def company_id_was; end

    sig { void }
    def company_id_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def description; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.nilable(::String)) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def description_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def description_previously_was; end

    sig { returns(T.nilable(::String)) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(::Integer) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(::Integer) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def job_area; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def job_area=(value); end

    sig { returns(T::Boolean) }
    def job_area?; end

    sig { returns(T.nilable(::String)) }
    def job_area_before_last_save; end

    sig { returns(T.untyped) }
    def job_area_before_type_cast; end

    sig { returns(T::Boolean) }
    def job_area_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def job_area_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def job_area_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def job_area_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def job_area_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def job_area_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def job_area_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def job_area_previously_was; end

    sig { returns(T.nilable(::String)) }
    def job_area_was; end

    sig { void }
    def job_area_will_change!; end

    sig { returns(T.nilable(::String)) }
    def job_department; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def job_department=(value); end

    sig { returns(T::Boolean) }
    def job_department?; end

    sig { returns(T.nilable(::String)) }
    def job_department_before_last_save; end

    sig { returns(T.untyped) }
    def job_department_before_type_cast; end

    sig { returns(T::Boolean) }
    def job_department_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def job_department_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def job_department_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def job_department_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def job_department_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def job_department_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def job_department_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def job_department_previously_was; end

    sig { returns(T.nilable(::String)) }
    def job_department_was; end

    sig { void }
    def job_department_will_change!; end

    sig { returns(T.nilable(::String)) }
    def job_division; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def job_division=(value); end

    sig { returns(T::Boolean) }
    def job_division?; end

    sig { returns(T.nilable(::String)) }
    def job_division_before_last_save; end

    sig { returns(T.untyped) }
    def job_division_before_type_cast; end

    sig { returns(T::Boolean) }
    def job_division_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def job_division_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def job_division_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def job_division_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def job_division_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def job_division_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def job_division_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def job_division_previously_was; end

    sig { returns(T.nilable(::String)) }
    def job_division_was; end

    sig { void }
    def job_division_will_change!; end

    sig { returns(::Integer) }
    def job_offer_reference_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def job_offer_reference_id=(value); end

    sig { returns(T::Boolean) }
    def job_offer_reference_id?; end

    sig { returns(T.nilable(::Integer)) }
    def job_offer_reference_id_before_last_save; end

    sig { returns(T.untyped) }
    def job_offer_reference_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def job_offer_reference_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def job_offer_reference_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def job_offer_reference_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def job_offer_reference_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def job_offer_reference_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def job_offer_reference_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def job_offer_reference_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def job_offer_reference_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def job_offer_reference_id_was; end

    sig { void }
    def job_offer_reference_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def job_schedule; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def job_schedule=(value); end

    sig { returns(T::Boolean) }
    def job_schedule?; end

    sig { returns(T.nilable(::Integer)) }
    def job_schedule_before_last_save; end

    sig { returns(T.untyped) }
    def job_schedule_before_type_cast; end

    sig { returns(T::Boolean) }
    def job_schedule_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def job_schedule_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def job_schedule_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def job_schedule_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def job_schedule_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def job_schedule_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def job_schedule_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def job_schedule_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def job_schedule_was; end

    sig { void }
    def job_schedule_will_change!; end

    sig { returns(T.nilable(::String)) }
    def job_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def job_type=(value); end

    sig { returns(T::Boolean) }
    def job_type?; end

    sig { returns(T.nilable(::String)) }
    def job_type_before_last_save; end

    sig { returns(T.untyped) }
    def job_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def job_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def job_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def job_type_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def job_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def job_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def job_type_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def job_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def job_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def job_type_was; end

    sig { void }
    def job_type_will_change!; end

    sig { returns(T.nilable(::String)) }
    def location; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def location=(value); end

    sig { returns(T::Boolean) }
    def location?; end

    sig { returns(T.nilable(::String)) }
    def location_before_last_save; end

    sig { returns(T.untyped) }
    def location_before_type_cast; end

    sig { returns(T::Boolean) }
    def location_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def location_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def location_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def location_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def location_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def location_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def location_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def location_previously_was; end

    sig { returns(T.nilable(::String)) }
    def location_was; end

    sig { void }
    def location_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def max_salary; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def max_salary=(value); end

    sig { returns(T::Boolean) }
    def max_salary?; end

    sig { returns(T.nilable(::Integer)) }
    def max_salary_before_last_save; end

    sig { returns(T.untyped) }
    def max_salary_before_type_cast; end

    sig { returns(T::Boolean) }
    def max_salary_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def max_salary_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def max_salary_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def max_salary_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def max_salary_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def max_salary_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def max_salary_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def max_salary_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def max_salary_was; end

    sig { void }
    def max_salary_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def min_salary; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def min_salary=(value); end

    sig { returns(T::Boolean) }
    def min_salary?; end

    sig { returns(T.nilable(::Integer)) }
    def min_salary_before_last_save; end

    sig { returns(T.untyped) }
    def min_salary_before_type_cast; end

    sig { returns(T::Boolean) }
    def min_salary_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def min_salary_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def min_salary_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def min_salary_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def min_salary_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def min_salary_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def min_salary_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def min_salary_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def min_salary_was; end

    sig { void }
    def min_salary_will_change!; end

    sig { returns(T.nilable(::String)) }
    def name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def published_at; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def published_at=(value); end

    sig { returns(T::Boolean) }
    def published_at?; end

    sig { returns(T.nilable(::Date)) }
    def published_at_before_last_save; end

    sig { returns(T.untyped) }
    def published_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def published_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def published_at_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def published_at_change_to_be_saved; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def published_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def published_at_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def published_at_previous_change; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def published_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def published_at_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def published_at_was; end

    sig { void }
    def published_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def requirements; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def requirements=(value); end

    sig { returns(T::Boolean) }
    def requirements?; end

    sig { returns(T.nilable(::String)) }
    def requirements_before_last_save; end

    sig { returns(T.untyped) }
    def requirements_before_type_cast; end

    sig { returns(T::Boolean) }
    def requirements_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def requirements_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def requirements_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def requirements_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def requirements_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def requirements_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def requirements_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def requirements_previously_was; end

    sig { returns(T.nilable(::String)) }
    def requirements_was; end

    sig { void }
    def requirements_will_change!; end

    sig { void }
    def restore_company_id!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_job_area!; end

    sig { void }
    def restore_job_department!; end

    sig { void }
    def restore_job_division!; end

    sig { void }
    def restore_job_offer_reference_id!; end

    sig { void }
    def restore_job_schedule!; end

    sig { void }
    def restore_job_type!; end

    sig { void }
    def restore_location!; end

    sig { void }
    def restore_max_salary!; end

    sig { void }
    def restore_min_salary!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_published_at!; end

    sig { void }
    def restore_requirements!; end

    sig { void }
    def restore_show_location!; end

    sig { void }
    def restore_show_published_at!; end

    sig { void }
    def restore_show_salary_range!; end

    sig { void }
    def restore_status!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_use_fantasy_name!; end

    sig { void }
    def restore_vacancies_count!; end

    sig { void }
    def restore_visible!; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_company_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_company_id?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_job_area; end

    sig { returns(T::Boolean) }
    def saved_change_to_job_area?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_job_department; end

    sig { returns(T::Boolean) }
    def saved_change_to_job_department?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_job_division; end

    sig { returns(T::Boolean) }
    def saved_change_to_job_division?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_job_offer_reference_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_job_offer_reference_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_job_schedule; end

    sig { returns(T::Boolean) }
    def saved_change_to_job_schedule?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_job_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_job_type?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_location; end

    sig { returns(T::Boolean) }
    def saved_change_to_location?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_max_salary; end

    sig { returns(T::Boolean) }
    def saved_change_to_max_salary?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_min_salary; end

    sig { returns(T::Boolean) }
    def saved_change_to_min_salary?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_published_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_published_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_requirements; end

    sig { returns(T::Boolean) }
    def saved_change_to_requirements?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_show_location; end

    sig { returns(T::Boolean) }
    def saved_change_to_show_location?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_show_published_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_show_published_at?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_show_salary_range; end

    sig { returns(T::Boolean) }
    def saved_change_to_show_salary_range?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_status?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_use_fantasy_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_use_fantasy_name?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_vacancies_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_vacancies_count?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_visible; end

    sig { returns(T::Boolean) }
    def saved_change_to_visible?; end

    sig { returns(T.nilable(T::Boolean)) }
    def show_location; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def show_location=(value); end

    sig { returns(T::Boolean) }
    def show_location?; end

    sig { returns(T.nilable(T::Boolean)) }
    def show_location_before_last_save; end

    sig { returns(T.untyped) }
    def show_location_before_type_cast; end

    sig { returns(T::Boolean) }
    def show_location_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def show_location_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def show_location_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def show_location_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def show_location_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def show_location_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def show_location_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def show_location_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def show_location_was; end

    sig { void }
    def show_location_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def show_published_at; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def show_published_at=(value); end

    sig { returns(T::Boolean) }
    def show_published_at?; end

    sig { returns(T.nilable(T::Boolean)) }
    def show_published_at_before_last_save; end

    sig { returns(T.untyped) }
    def show_published_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def show_published_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def show_published_at_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def show_published_at_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def show_published_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def show_published_at_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def show_published_at_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def show_published_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def show_published_at_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def show_published_at_was; end

    sig { void }
    def show_published_at_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def show_salary_range; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def show_salary_range=(value); end

    sig { returns(T::Boolean) }
    def show_salary_range?; end

    sig { returns(T.nilable(T::Boolean)) }
    def show_salary_range_before_last_save; end

    sig { returns(T.untyped) }
    def show_salary_range_before_type_cast; end

    sig { returns(T::Boolean) }
    def show_salary_range_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def show_salary_range_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def show_salary_range_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def show_salary_range_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def show_salary_range_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def show_salary_range_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def show_salary_range_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def show_salary_range_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def show_salary_range_was; end

    sig { void }
    def show_salary_range_will_change!; end

    sig { returns(T.nilable(::String)) }
    def status; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def status=(value); end

    sig { returns(T::Boolean) }
    def status?; end

    sig { returns(T.nilable(::String)) }
    def status_before_last_save; end

    sig { returns(T.untyped) }
    def status_before_type_cast; end

    sig { returns(T::Boolean) }
    def status_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def status_was; end

    sig { void }
    def status_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def use_fantasy_name; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def use_fantasy_name=(value); end

    sig { returns(T::Boolean) }
    def use_fantasy_name?; end

    sig { returns(T.nilable(T::Boolean)) }
    def use_fantasy_name_before_last_save; end

    sig { returns(T.untyped) }
    def use_fantasy_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def use_fantasy_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def use_fantasy_name_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def use_fantasy_name_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def use_fantasy_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def use_fantasy_name_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def use_fantasy_name_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def use_fantasy_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def use_fantasy_name_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def use_fantasy_name_was; end

    sig { void }
    def use_fantasy_name_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def vacancies_count; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def vacancies_count=(value); end

    sig { returns(T::Boolean) }
    def vacancies_count?; end

    sig { returns(T.nilable(::Integer)) }
    def vacancies_count_before_last_save; end

    sig { returns(T.untyped) }
    def vacancies_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def vacancies_count_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def vacancies_count_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def vacancies_count_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def vacancies_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def vacancies_count_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def vacancies_count_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def vacancies_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def vacancies_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def vacancies_count_was; end

    sig { void }
    def vacancies_count_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def visible; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def visible=(value); end

    sig { returns(T::Boolean) }
    def visible?; end

    sig { returns(T.nilable(T::Boolean)) }
    def visible_before_last_save; end

    sig { returns(T.untyped) }
    def visible_before_type_cast; end

    sig { returns(T::Boolean) }
    def visible_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def visible_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def visible_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def visible_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def visible_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def visible_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def visible_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def visible_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def visible_was; end

    sig { void }
    def visible_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_company_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_job_area?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_job_department?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_job_division?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_job_offer_reference_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_job_schedule?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_job_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_location?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_max_salary?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_min_salary?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_published_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_requirements?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_show_location?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_show_published_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_show_salary_range?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_use_fantasy_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_vacancies_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_visible?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_published(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def published(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig { params(blk: T.proc.params(record: ::JobOffer).returns(BasicObject)).returns(T::Array[::JobOffer]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::JobOffer } }

    sig { returns(T::Array[::JobOffer]) }
    def to_a; end

    sig { returns(T::Array[::JobOffer]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::JobOffer } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::JobOffer } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::JobOffer } }

    sig do
      params(
        records: T.any(::JobOffer, T::Enumerable[T.any(::JobOffer, T::Enumerable[::JobOffer])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::JobOffer, T::Enumerable[T.any(::JobOffer, T::Enumerable[::JobOffer])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::JobOffer, T::Enumerable[T.any(::JobOffer, T::Enumerable[::JobOffer])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::JobOffer]) }
    def load_target; end

    sig do
      params(
        records: T.any(::JobOffer, T::Enumerable[T.any(::JobOffer, T::Enumerable[::JobOffer])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::JobOffer, T::Enumerable[T.any(::JobOffer, T::Enumerable[::JobOffer])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::JobOffer, T::Enumerable[T.any(::JobOffer, T::Enumerable[::JobOffer])])
      ).returns(T::Array[::JobOffer])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::JobOffer]) }
    def target; end

    sig { returns(T::Array[::JobOffer]) }
    def to_a; end

    sig { returns(T::Array[::JobOffer]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::JobOffer } }

    sig { returns(T::Array[::JobOffer]) }
    def to_a; end

    sig { returns(T::Array[::JobOffer]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::JobOffer } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::JobOffer } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
